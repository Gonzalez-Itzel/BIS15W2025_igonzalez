) # this closes the fluid page
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput(  selectInput("x", # we are naming the select input 'x'
"select X variable", # this what we want the user to see
choices =c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
'y', # we are naming the select input 'y'
"select y variable", # this what we want the user to see
choices=c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected="bill_length_mm")
) # this closes the fluid page
library(shiny)
ui <- fluidPage(
selectInput("x", # we are naming the select input 'x'
"select X variable", # this what we want the user to see
choices =c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
selectInput( 'y', # we are naming the select input 'y'
library(shiny)
ui <- fluidPage(
selectInput("x", # we are naming the select input 'x'
"select X variable", # this what we want the user to see
choices =c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput( 'y', # we are naming the select input 'y'
"select y variable", # this what we want the user to see
choices=c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected="bill_length_mm")
) # this closes the fluid page
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output) {
reactive({input$x
input$y
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output) {
reactive({input$x
input$y
})
}
shinyApp(ui, server)
penguins %>%
ggplot(aes(x=bill_length_mm, y=body_mass_g, color=species))+
geom_point(na.rm=T)+
theme_light(base_size=14)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output, session) {
output$plot <- renderPlot( # finding the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ # make sure to use aes_string not just aes
geom_point(na.rm=T)+
theme_light(base_size = 14) # font
})
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output, session)
output$plot <- renderPlot( # finding the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ # make sure to use aes_string not just aes
geom_point(na.rm=T)+
theme_light(base_size = 14) # font
})
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ # finding the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ # make sure to use aes_string not just aes
geom_point(na.rm=T)+
theme_light(base_size = 14) # font
})
}
shinyApp(ui, server)
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
plotOutput("plot", width = "500px", height = "400px")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
plotOutput("plot", width = "500px", height = "400px")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
plotOutput("plot", width = "500px", height = "400px")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
plotOutput("plot", width = "500px", height = "400px")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
plotOutput("plot", width = "500px", height = "400px")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
plotOutput("plot", width = "500px", height = "400px")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
plotOutput("plot", width = "500px", height = "400px")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ # finding the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ # make sure to use aes_string not just aes
geom_point(na.rm=T)+
theme_light(base_size = 14) # font
})
}
shinyApp(ui, server)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
names(homerange)
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation))+
geom_bar(position="dodge")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ # finding the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ # make sure to use aes_string not just aes
geom_point(na.rm=T)+
theme_light(base_size = 14) # font
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position = "dodge", alpha = 0.8, color="black")
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
runApp('homerange_application.R')
library(shiny)
ui <- fluidPage(
selectInput("x",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm")
)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),)
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEdnded(stopApp) # auto stop of app when closed
output$plot <- renderPlot({
ggplot(data=penguins,
aes_strings(x=input$x, y=input$y, color='species'))+
geom_point(size=input$point)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEdnded(stopApp) # auto stop of app when closed
output$plot <- renderPlot({
ggplot(data=penguins,
aes_strings(x=input$x, y=input$y, color='species'))+
geom_point(size=input$pointsize)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEdnded(stopApp) # auto stop of app when closed
output$plot <- renderPlot({
ggplot(data=penguins,
aes_strings(x=input$x, y=input$y, color='species'))+
geom_point(size=input$pointsize)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) # auto stop of app when closed
output$plot <- renderPlot({
ggplot(data=penguins,
aes_strings(x=input$x, y=input$y, color='species'))+
geom_point(size=input$pointsize)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) # auto stop of app when closed
output$plot <- renderPlot({
ggplot(data=penguins,
aes_strings(x=input$x, y=input$y, color='species'))+
geom_point(size=input$pointsize)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) # auto stop of app when closed
output$plot <- renderPlot({
ggplot2(data=penguins,
aes_strings(x=input$x, y=input$y, color='species'))+
geom_point(size=input$pointsize)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "This is the Header"),
dashboardSidebar(title = "This is the Sidebar"),
dashboardBody() # this is where the output will go
)
ui <- dashboardPage(
dashboardHeader(title = "This is the Header"),
dashboardSidebar(title = "This is the Sidebar"),
dashboardBody() # this is where the output will go
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
library(ggplot2)
ui <- dashboardPage(
dashboardHeader(title = "This is the Header"),
dashboardSidebar(title = "This is the Sidebar"),
dashboardBody() # this is where the output will go
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) # auto stop of app when closed
output$plot <- renderPlot({
ggplot(data=penguins,
aes_strings(x=input$x, y=input$y, color='species'))+
geom_point(size=input$pointsize)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm","body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "select the pointsie", min =0.5, max=3, value=1, step=0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) # auto stop of app when closed
output$plot <- renderPlot({
ggplot(data=penguins,
aes_string(x=input$x, y=input$y, color='species'))+
geom_point(size=input$pointsize)+
theme_light(base_size=14)
})
}
shinyApp(ui, server)
